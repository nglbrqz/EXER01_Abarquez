package MyApp;

import MyLib.LotManagement.Subdivision;
import MyLib.LotManagement.Block;
import MyLib.LotData.Log;
import MyLib.LotData.LotData;
import MyLib.LotFactory.ILotStatus;
import MyLib.LotFactory.ConcreteFactory;
import MyLib.LotFactory.IFactory;
import MyLib.User.User;
import java.awt.Cursor;
import javax.swing.JFrame;
import java.lang.Math;  
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.SwingConstants;

/**
 *
 * @author Angela
 */
public class Form extends javax.swing.JFrame {
    private User authenticatedUser;
    
    public Form() {
        initComponents();
        
        // Set the cursor for the button to hand cursor when hovered
        button_logout.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button_filter.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        //set as default not visible
        lotAction_confirmReservation.setVisible(false);
        lotAction_confirmPayment.setVisible(false);
        lotAction_clearStatus.setVisible(false);

        //setting if admin or client based on the login
        if(User.type == "admin"){
            accountLabel.setText("Admin Account");
            lotAction_confirmReservation.setVisible(true);
            lotAction_confirmPayment.setVisible(true);
            lotAction_clearStatus.setVisible(true);
            message1.setText("Using the admin account, you may reserve\n,"
                    + "buy, and confirm pending lots.");
        }else{
            accountLabel.setText("Client Account");
            message1.setText("Using the client account, you may reserve and buy"
                    + " lots.");
        }
        
        //Table content set to right alignment
        DefaultTableCellRenderer alignRight = new DefaultTableCellRenderer();
        alignRight.setHorizontalAlignment(SwingConstants.RIGHT);
        
        //Table content set to left alignment
        DefaultTableCellRenderer alignLeft = new DefaultTableCellRenderer();
        alignLeft.setHorizontalAlignment(SwingConstants.LEFT);
        
        //Table content set to center alignment
        DefaultTableCellRenderer alignCenter = new DefaultTableCellRenderer();
        alignCenter.setHorizontalAlignment(SwingConstants.CENTER);

        // Set column alignments for the jTable1
        //I did it by column for more flexibility to customize
        lotTable.getColumnModel().getColumn(0).setCellRenderer(alignCenter); //Block No. column
        lotTable.getColumnModel().getColumn(1).setCellRenderer(alignCenter); // Lot column
        lotTable.getColumnModel().getColumn(2).setCellRenderer(alignCenter);  // Size column
        lotTable.getColumnModel().getColumn(3).setCellRenderer(alignCenter); // Price column
        lotTable.getColumnModel().getColumn(4).setCellRenderer(alignCenter); // Status column
        
    }
    IFactory lotStatusFactory = new ConcreteFactory();
    ILotStatus myLotStatus;
    
    public void setAuthenticatedUser(User user) {
        this.authenticatedUser = user;
        Username.setText("Username: " + authenticatedUser.getUsername());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        accountLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lotTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lotAction_reserve = new javax.swing.JButton();
        lotAction_buy = new javax.swing.JButton();
        lotAction_generateReport = new javax.swing.JButton();
        button_logout = new javax.swing.JButton();
        lotAction_confirmReservation = new javax.swing.JButton();
        lotAction_confirmPayment = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        message1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        lotAction_clearStatus = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        showAllPending = new javax.swing.JButton();
        showAllAvailable = new javax.swing.JButton();
        filter_blockNumber = new javax.swing.JComboBox<>();
        label_blockno = new javax.swing.JLabel();
        label_size = new javax.swing.JLabel();
        filter_size = new javax.swing.JComboBox<>();
        filter_price = new javax.swing.JComboBox<>();
        label_price = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        label_filter = new javax.swing.JLabel();
        button_filter = new javax.swing.JButton();
        Username = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(242, 244, 243));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        accountLabel.setFont(new java.awt.Font("Verdana", 0, 26)); // NOI18N
        accountLabel.setForeground(new java.awt.Color(89, 53, 33));
        accountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        accountLabel.setText("Client Account");

        jPanel3.setBackground(new java.awt.Color(235, 233, 230));

        lotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Block", "Lot", "Size", "Price", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lotTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(lotTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo-small.jpg"))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Eras Bold ITC", 1, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(170, 57, 63));
        jLabel5.setText("RedDoor");

        lotAction_reserve.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_reserve.setText("Reserve Lot");
        lotAction_reserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_reserveActionPerformed(evt);
            }
        });

        lotAction_buy.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_buy.setText("Buy Lot");
        lotAction_buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_buyActionPerformed(evt);
            }
        });

        lotAction_generateReport.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_generateReport.setText("Generate Report");
        lotAction_generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_generateReportActionPerformed(evt);
            }
        });

        button_logout.setBackground(new java.awt.Color(208, 78, 79));
        button_logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Buttons/button-logout.png"))); // NOI18N
        button_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        button_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_logoutActionPerformed(evt);
            }
        });

        lotAction_confirmReservation.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_confirmReservation.setText("Confirm Reservation");
        lotAction_confirmReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_confirmReservationActionPerformed(evt);
            }
        });

        lotAction_confirmPayment.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_confirmPayment.setText("Confirm Payment");
        lotAction_confirmPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_confirmPaymentActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Cambria", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(140, 140, 140));
        jLabel10.setText("Real Estate Sales & Management System");

        message1.setForeground(new java.awt.Color(101, 87, 84));
        message1.setText("Welcome Message");

        jPanel5.setBackground(new java.awt.Color(102, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );

        lotAction_clearStatus.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lotAction_clearStatus.setText("Clear Status");
        lotAction_clearStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotAction_clearStatusActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(235, 233, 230));

        showAllPending.setText("Show All Pending Lots");
        showAllPending.setMaximumSize(new java.awt.Dimension(165, 25));
        showAllPending.setMinimumSize(new java.awt.Dimension(165, 25));
        showAllPending.setPreferredSize(new java.awt.Dimension(165, 25));
        showAllPending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllPendingActionPerformed(evt);
            }
        });

        showAllAvailable.setText("Show All Sold Lots");
        showAllAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllAvailableActionPerformed(evt);
            }
        });

        filter_blockNumber.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        filter_blockNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "All" }));
        filter_blockNumber.setSelectedIndex(5);
        filter_blockNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_blockNumberActionPerformed(evt);
            }
        });

        label_blockno.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        label_blockno.setText("Block No.");

        label_size.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        label_size.setText("Size in m² ");

        filter_size.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        filter_size.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "100 - 200", "200 - 300", "300 - 400", "500 - 600", "600+" }));
        filter_size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_sizeActionPerformed(evt);
            }
        });

        filter_price.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        filter_price.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Below 1,000,000", "1,000,000 - 2,000,000", "2,000,000 - 3,000,000", "3,000,000 - 4,000,000", "4,000,000 - 5,000,000", "5,000,000 - 6,000,000", "6,000,000 - 7,000,000", "7,000,000 - 8,000,000", "8,000,000 - 9,000,000", "Above 9,000,000" }));
        filter_price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_priceActionPerformed(evt);
            }
        });

        label_price.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        label_price.setText("Price");

        jPanel7.setBackground(new java.awt.Color(217, 211, 201));
        jPanel7.setPreferredSize(new java.awt.Dimension(0, 19));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );

        label_filter.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        label_filter.setText("Filter Lot by");

        button_filter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Buttons/button-filter.png"))); // NOI18N
        button_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_filterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_filter)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_blockno)
                            .addComponent(filter_blockNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filter_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_size))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_price, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filter_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)))
                .addGap(7, 7, 7)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(showAllPending, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showAllAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(172, 172, 172))
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_filter)
                        .addGap(5, 5, 5)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(label_blockno)
                                    .addComponent(label_size)
                                    .addComponent(label_price, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(filter_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filter_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filter_blockNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(button_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(showAllPending, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(showAllAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        Username.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        Username.setForeground(new java.awt.Color(117, 89, 62));
        Username.setText("Username: ");

        jPanel4.setBackground(new java.awt.Color(102, 0, 51));
        jPanel4.setForeground(new java.awt.Color(102, 0, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(0, 4));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 4, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(104, 58, 58));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 82, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(12, 12, 12)))
                        .addGap(32, 32, 32)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Username)
                                    .addComponent(accountLabel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(message1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lotAction_reserve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lotAction_confirmReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lotAction_confirmPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lotAction_buy, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lotAction_clearStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lotAction_generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(143, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(button_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(accountLabel)
                                    .addGap(0, 0, 0)
                                    .addComponent(Username)
                                    .addGap(20, 20, 20)
                                    .addComponent(message1))))))
                .addGap(0, 8, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lotAction_reserve, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotAction_buy, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotAction_clearStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotAction_generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lotAction_confirmPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotAction_confirmReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_filterActionPerformed
        performFiltering();
    }//GEN-LAST:event_button_filterActionPerformed

    private void filter_priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filter_priceActionPerformed

    private void filter_blockNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_blockNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filter_blockNumberActionPerformed

    private void showAllAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllAvailableActionPerformed
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        LotData d = LotData.getInstance();

        model.setRowCount(0);

        for (int j = 0; j < d.getMySub().getMaxBlock(); j++) {
            for (int i = 0; i < d.getMySub().getBlockArray()[j].getMaxLot(); i++) {
                String lotStatus = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotStatus();

                if (lotStatus.equals("Sold")) {
                    int blockNum = d.getMySub().getBlockArray()[j].getBlockNum();
                    int lotNum = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotNum();
                    int lotSize = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotSize();
                    String priceString = d.getMySub().getBlockArray()[j].getLotArray()[i].getPrice().generatePriceString();

                    model.insertRow(model.getRowCount(), new Object[]{blockNum, lotNum, lotSize, priceString, lotStatus});
                }
            }
        }

        for (int i = 0; i < 30 - lotTable.getRowCount(); i++) {
            model.addRow(new Object[]{null, null, null, null});
        }
    }//GEN-LAST:event_showAllAvailableActionPerformed

    private void showAllPendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllPendingActionPerformed
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        LotData d = LotData.getInstance();

        model.setRowCount(0);

        for (int j = 0; j < d.getMySub().getMaxBlock(); j++) {
            for (int i = 0; i < d.getMySub().getBlockArray()[j].getMaxLot(); i++) {
                String lotStatus = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotStatus();

                if (lotStatus.equals("Pending Reservation") || lotStatus.equals("Pending Payment")) {
                    int blockNum = d.getMySub().getBlockArray()[j].getBlockNum();
                    int lotNum = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotNum();
                    int lotSize = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotSize();
                    String priceString = d.getMySub().getBlockArray()[j].getLotArray()[i].getPrice().generatePriceString();

                    model.insertRow(model.getRowCount(), new Object[]{blockNum, lotNum, lotSize, priceString, lotStatus});
                }
            }
        }

        for (int i = 0; i < 30 - lotTable.getRowCount(); i++) {
            model.addRow(new Object[]{null, null, null, null});
        }
    }//GEN-LAST:event_showAllPendingActionPerformed

    private void lotAction_clearStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_clearStatusActionPerformed
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        LotData d = LotData.getInstance();
        Log log = Log.getInstance();

        try {
            int lotNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 1).toString());
            int blockNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 0).toString());

            blockNum -= 1;

            for (int i = 0; i < d.getMySub().getBlockArray()[blockNum].getLotArray().length; i++) {
                if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotNum() == lotNum) {
                    String currentStatus = d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotStatus();

                    if (!currentStatus.equals("Available")) {
                        // Decrement the relevant counters based on the current status
                        if (currentStatus.equals("Reserved")) {
                            log.subReserved();
                        } else if (currentStatus.equals("Pending Reservation")) {
                            log.subPendingReservations();
                        } else if (currentStatus.equals("Pending Payment")) {
                            log.subPendingPayments();
                        } else if (currentStatus.equals("Sold")) {
                            log.subSold();
                        }

                        // Change the status to "Available"
                        d.getMySub().getBlockArray()[blockNum].getLotArray()[i].setStatus("Available");

                        // Update the UI
                        model.setValueAt("Available", lotTable.getSelectedRow(), 4);
                    } else {
                        // Handle the case where the lot is already "Available"
                        myError("The selected lot is already Available.");
                    }
                }
            }
        } catch (Exception e) {
            myError("Please select a lot to clear its status.");
        }
    }//GEN-LAST:event_lotAction_clearStatusActionPerformed

    private void lotAction_confirmPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_confirmPaymentActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        Log log = Log.getInstance();
        LotData d = LotData.getInstance();

        try
        {
            int lotNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 1).toString() );
            int blockNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 0).toString() );

            blockNum -= 1;

            myLotStatus = lotStatusFactory.doSomething(4);

            for (int i = 0; i < d.getMySub().getBlockArray()[blockNum].getLotArray().length; i++)
            {
                if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotNum()== lotNum)
                {
                    if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotStatus() == "Pending Payment")
                    {
                        d.getMySub().getBlockArray()[blockNum].getLotArray()[i].setStatus(myLotStatus.generateStatus());
                        model.setValueAt(myLotStatus.generateStatus(), lotTable.getSelectedRow(), 4);
                        log.subPendingPayments();
                        log.addSold();
                    }
                    else
                    {
                        myError("There is no payment to confirm.");
                    }
                }
            }
        }catch(Exception e)
        {
            myError("Please select a purchased lot to confirm.");
        }
    }//GEN-LAST:event_lotAction_confirmPaymentActionPerformed

    private void lotAction_confirmReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_confirmReservationActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        Log log = Log.getInstance();
        LotData d = LotData.getInstance();

        try
        {
            int lotNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 1).toString() );
            int blockNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 0).toString() );

            blockNum -= 1;

            myLotStatus = lotStatusFactory.doSomething(3);

            for (int i = 0; i < d.getMySub().getBlockArray()[blockNum].getLotArray().length; i++)
            {
                if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotNum()== lotNum)
                {
                    if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotStatus() == "Pending Reservation")
                    {
                        d.getMySub().getBlockArray()[blockNum].getLotArray()[i].setStatus(myLotStatus.generateStatus());
                        model.setValueAt(myLotStatus.generateStatus(), lotTable.getSelectedRow(), 4);
                        log.subPendingReservations();
                        log.addReserved();
                    }
                    else
                    {
                        myError("There is no reservation to confirm.");
                    }
                }
            }
        }catch(Exception e)
        {
            myError("Please select a reserved lot to confirm.");
        }
    }//GEN-LAST:event_lotAction_confirmReservationActionPerformed

    private void button_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_logoutActionPerformed
        // TODO add your handling code here:
        redirectLogin();
    }//GEN-LAST:event_button_logoutActionPerformed

    private void lotAction_generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_generateReportActionPerformed
        Report report = new Report(this); // Pass a reference to the Form instance
        report.setLocationRelativeTo(null);
        report.generateReport();
        report.setVisible(true);
    }//GEN-LAST:event_lotAction_generateReportActionPerformed

    private void lotAction_buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_buyActionPerformed
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        Log log = Log.getInstance();
        LotData d = LotData.getInstance();

        try
        {
            int lotNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 1).toString() );
            int blockNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 0).toString() );

            blockNum -= 1;

            myLotStatus = lotStatusFactory.doSomething(2);

            for (int i = 0; i < d.getMySub().getBlockArray()[blockNum].getLotArray().length; i++)
            {
                if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotNum()== lotNum)
                {
                    if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotStatus() == "Reserved")
                    {
                        d.getMySub().getBlockArray()[blockNum].getLotArray()[i].setStatus(myLotStatus.generateStatus());
                        model.setValueAt(myLotStatus.generateStatus(), lotTable.getSelectedRow(), 4);
                        log.subReserved();
                        log.addPendingPayments();
                    }
                    else
                    {
                        myError("You can't buy this lot. Please choose a lot labeled as Reserved.");
                    }
                }
            }
        }catch(Exception e)
        {
            myError("Please select a lot to reserve.");
        }
    }//GEN-LAST:event_lotAction_buyActionPerformed

    private void lotAction_reserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotAction_reserveActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        Log log = Log.getInstance();
        LotData d = LotData.getInstance();

        try
        {
            int lotNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 1).toString() );
            int blockNum = Integer.parseInt(lotTable.getValueAt(lotTable.getSelectedRow(), 0).toString() );

            blockNum -= 1;

            myLotStatus = lotStatusFactory.doSomething(1);

            for (int i = 0; i < d.getMySub().getBlockArray()[blockNum].getLotArray().length; i++)
            {
                if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotNum()== lotNum)
                {
                    if (d.getMySub().getBlockArray()[blockNum].getLotArray()[i].getLotStatus() == "Available")
                    {
                        d.getMySub().getBlockArray()[blockNum].getLotArray()[i].setStatus(myLotStatus.generateStatus());
                        model.setValueAt(myLotStatus.generateStatus(), lotTable.getSelectedRow(), 4);
                        log.addPendingReservations();
                    }
                    else
                    {
                        myError("You can't reserve this lot. Please choose another lot.");
                    }
                }
            }
        }catch(Exception e)
        {
            myError("Please select a lot to reserve.");
        }
    }//GEN-LAST:event_lotAction_reserveActionPerformed

    private void filter_sizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_sizeActionPerformed
        
    }//GEN-LAST:event_filter_sizeActionPerformed

    private void performFiltering() {
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        LotData d = LotData.getInstance();
        model.setRowCount(0);

        String selectedBlockNumber = filter_blockNumber.getSelectedItem().toString();
        String selectedSize = filter_size.getSelectedItem().toString();
        String selectedPriceRange = filter_price.getSelectedItem().toString();

        DecimalFormat priceFormat = new DecimalFormat("#,###,###,##0.00"); // Format to have exactly two decimal places

        for (int j = 0; j < Subdivision.getMaxBlock(); j++) {
            for (int i = 0; i < Block.getMaxLot(); i++) {
                String lotStatus = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotStatus();
                int blockNum = d.getMySub().getBlockArray()[j].getBlockNum();
                double priceValue = d.getMySub().getBlockArray()[j].getLotArray()[i].getPrice().getValue();
                int lotSize = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotSize();

                boolean blockNumMatch = selectedBlockNumber.equals("All") || selectedBlockNumber.equals(String.valueOf(blockNum));
                boolean sizeMatch = selectedSize.equals("All") || checkSizeRange(selectedSize, lotSize);
                boolean priceMatch = selectedPriceRange.equals("All") || checkPriceRange(selectedPriceRange, priceValue);

                if (blockNumMatch) {
                    if (sizeMatch) {
                        if (priceMatch) {
                            int lotNum = d.getMySub().getBlockArray()[j].getLotArray()[i].getLotNum();
                            String priceString = priceFormat.format(priceValue); // Format the price to have two decimal places
                            model.insertRow(model.getRowCount(), new Object[]{blockNum, lotNum, lotSize, priceString, lotStatus});
                        }
                    }
                }
            }
        }
    }
    private boolean checkSizeRange(String range, int lotSize) {
        if (range.equals("100 - 200")) {
            return (lotSize >= 100) && (lotSize <= 200);
        } else if (range.equals("200 - 300")) {
            return (lotSize >= 200) && (lotSize <= 300);
        } else if (range.equals("300 - 400")) {
            return (lotSize >= 300) && (lotSize <= 400);
        } else if (range.equals("400 - 500")) {
            return (lotSize >= 400) && (lotSize <= 500);
        } else if (range.equals("500 - 600")) {
            return (lotSize >= 500) && (lotSize <= 600);
        } else if (range.equals("600+")) {
            return lotSize >= 600;
        }
        return true; // Return true for "All" or invalid selections for no filtering.
    }

    private boolean checkPriceRange(String range, double priceValue) {
        // Implement the price range checks in a similar manner.
        // For example, if you have "Below 1,000,000" as a range:
        if (range.equals("Below 1,000,000")) {
            return priceValue < 1000000;
        } else if (range.equals("1,000,000 - 2,000,000")){
            return (priceValue > 1000000) && (priceValue < 2000000);
        }else if (range.equals("2,000,000 - 3,000,000")){
            return (priceValue > 2000000) && (priceValue < 3000000);
        }else if (range.equals("3,000,000 - 4,000,000")){
            return (priceValue > 3000000) && (priceValue < 4000000);
        }else if (range.equals("4,000,000 - 5,000,000")){
            return (priceValue > 4000000) && (priceValue < 5000000);
        }else if (range.equals("5,000,000 - 6,000,000")){
            return (priceValue > 5000000) && (priceValue < 6000000);
        }else if (range.equals("6,000,000 - 7,000,000")){
            return (priceValue > 6000000) && (priceValue < 7000000);
        }else if (range.equals("7,000,000 - 8,000,000")){
            return (priceValue > 7000000) && (priceValue < 8000000);
        }else if (range.equals("8,000,000 - 9,000,000")){
            return (priceValue > 8000000) && (priceValue < 9000000);
        }else if (range.equals("Above 9,000,000")){
            return priceValue > 9000000;
        }
        return true; // Return true for "All" or invalid selections for no filtering.
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Username;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JButton button_filter;
    private javax.swing.JButton button_logout;
    private javax.swing.JComboBox<String> filter_blockNumber;
    private javax.swing.JComboBox<String> filter_price;
    private javax.swing.JComboBox<String> filter_size;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_blockno;
    private javax.swing.JLabel label_filter;
    private javax.swing.JLabel label_price;
    private javax.swing.JLabel label_size;
    private javax.swing.JButton lotAction_buy;
    private javax.swing.JButton lotAction_clearStatus;
    private javax.swing.JButton lotAction_confirmPayment;
    private javax.swing.JButton lotAction_confirmReservation;
    private javax.swing.JButton lotAction_generateReport;
    private javax.swing.JButton lotAction_reserve;
    public javax.swing.JTable lotTable;
    private javax.swing.JLabel message1;
    private javax.swing.JButton showAllAvailable;
    private javax.swing.JButton showAllPending;
    // End of variables declaration//GEN-END:variables

    public void redirectLogin(){
        Login login = new Login();
        login.setLocationRelativeTo(null);
        login.setVisible(true);
        login.pack();
        this.dispose();
    }
    
    public void redirectReport(){
        Report report = new Report();
        report.setLocationRelativeTo(null);
        report.setVisible(true);
        report.pack();
        this.dispose();
    }
    
    public void myError(String errorText){
        ErrorPopUp err = new ErrorPopUp(new JFrame("frame"),true);
        err.setjLabel2(errorText);
        err.setLocationRelativeTo(null);
        err.setVisible(true);        
    }
    
    public JTable getjTable1() {
        return lotTable;
    }    
}


